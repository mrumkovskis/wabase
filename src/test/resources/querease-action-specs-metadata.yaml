table: person
columns:
- id
- name                 ! 51
- surname                52
- sex                  ! 1   (M F)
- birthdate            ! date
- main_account.id        account.id


table: account
columns:
- id
- number               ! 64
- balance              ! decimal 10 2
- last_modified        ! dateTime
- person.id            !
uk:
- number


table: transaction
columns:
- id
- originator.id          account.id
- beneficiary.id       ! account.id
- amount               ! decimal 10 2
- date_time            ! dateTime


name: person
table: person
fields:
- id
- name
- surname
- sex
- birthdate
- main_account = account a[a.id = (person p[p.id = :id] {main_account_id})] {number} -> = account[number = _]{id}
- accounts * :
    table: account
    fields:
    - id
    - number
    - balance
    - last_modified
validations:
  - build cursors
  - ac(# c) { accounts {count(*)} }, (ac{c}) > 0, "person must have at least one account"
save:
- validations:
  - build cursors
  - ac(# c) { accounts {count(*)} }, (ac{c}) <= 3, "person cannot have more than 3 accounts, instead '" || (ac{c}) || "' encountered"
  - transactions_balance(# number, balance, tr_balance) {
      (accounts pa_deb[originator_id = pa_deb.id] transaction deb_tr?
        { number, sum(amount) amount_deb }(pa_deb.number)) a_deb
      [a_deb.number = a_cre.number]
      (accounts pa_cre[beneficiary_id = pa_cre.id] transaction cre_tr?
        { number, sum(amount) amount_cre }(pa_cre.number)) a_cre
      [a_cre.number = a.number] accounts a
      { a.number, a.balance, coalesce(amount_cre - amount_deb, 0) }
    }, wrong_balances(# number, balance, tr_balance) {
      transactions_balance tb[balance != tr_balance] { number, balance, tr_balance }
    }, (wrong_balances{count(*)}) = 0,
    "Wrong balance for accounts '" || (wrong_balances{group_concat(number || '(' || balance || ' != ' || tr_balance || ')')}) || "'"
- return org.wabase.QuereaseActionTestManager.personSaveBizMethod
- save person
- org.wabase.QuereaseActionTestManager.sendNotifications
- return get person


name: payment
table: transaction tr
joins:
- tr[tr.originator_id = originator.id]account originator?
- tr[tr.beneficiary_id = beneficiary.id]account beneficiary?
fields:
- id
- originator  = originator.number  -> = account [number = _] { id }
- beneficiary = beneficiary.number -> = account [number = _] { id }
- amount
- date_time -> = :time
save:
- validations:
  - :amount > 0, 'Wrong amount ' || :amount || '. Amount must be greater than 0'
  - balance(# s) { account[number = :originator] {balance} }, ((balance{s}) = null | (balance{s}) >= :amount),
      "Insufficient funds for account '" || :originator || "'"
- time = now()
- save payment
- =account[number = :originator] { balance, last_modified } [balance - :amount, :time]
- =account[number = :beneficiary] { balance, last_modified } [balance + :amount, :time]
- return :id


name: person_list
table: person
fields:
- id
- name
- surname
- sex
- birthdate
filter:
- name %~~%
- surname %~~%
list:
- count: count person_list  # named step supports also colon notation
- data: list person_list    # named step supports also colon notation


name: person_with_main_account
table:
fields:
- id
get:
- view_name = 'person'
- person = get :view_name
- main_acc_id = coalesce((account[number = :person.main_account] {id}), -1)
- account = (id = :main_acc_id) -> get person_accounts
- main_account_data = if_defined_or_else(:account.number, :account.number || '(' || :account.balance || ')', '<no main account>')
- return :person + (main_account = :main_account_data)
